----------------------------------------------------------------------------------------------------------------------------------------------------------------function gadget:GetInfo()  return {    name      = "Retreat Command",    desc      = "Handle retreats",    author    = "CarRepairer",    date      = "2014-04-10",    license   = "GNU GPL, v2 or later",    layer     = 0,    enabled   = true,  }end----------------------------------------------------------------------------------------------------------------------------------------------------------------local echo = Spring.Echo--------------------------------------------------------------------------------include("LuaRules/Configs/customcmds.h.lua")local Tooltips = {	'Orders: Never retreat.',	'Orders: Retreat at less than 30% health (right-click to cancel).',	'Orders: Retreat at less than 60% health (right-click to cancel).',	'Orders: Retreat at less than 90% health (right-click to cancel).',}local DefaultState = 0local CommandOrder = 123456local CommandDesc = {	id          = CMD_RETREAT,	type        = CMDTYPE.ICON_MODE,	name        = 'Retreat',	action      = 'retreat',	tooltip 	= Tooltips[DefaultState + 1],	params  = { 'Retreat Off', 'Retreat Off', 'Retreat 30%', 'Retreat 60%', 'Retreat 90%' }, }local StateCount = #CommandDesc.params-1----------------------------------------------------------------------------------------------------------------------------------------------------------------if gadgetHandler:IsSyncedCode() then -- SYNCED----------------------------------------------------------------------------------------------------------------------------------------------------------------local spGetCommandQueue 	= Spring.GetCommandQueuelocal spGetUnitTeam 		= Spring.GetUnitTeamlocal spGetUnitPosition 	= Spring.GetUnitPositionlocal spGiveOrderToUnit 	= Spring.GiveOrderToUnitlocal spInsertUnitCmdDesc 	= Spring.InsertUnitCmdDesclocal spEditUnitCmdDesc 	= Spring.EditUnitCmdDesclocal spGetUnitHealth 		= Spring.GetUnitHealthlocal spGetUnitRulesParam 	= Spring.GetUnitRulesParamlocal spSetUnitRulesParam 	= Spring.SetUnitRulesParamlocal spFindUnitCmdDesc 	= Spring.FindUnitCmdDesclocal spGetUnitIsStunned 	= Spring.GetUnitIsStunnedlocal rand 		= math.randomlocal retreaters = {}local wantRetreat = {}local retreaterTagsMove = {}local retreaterTagsWait = {}local returnUnit = {}local retreatables = {}local havens = {}local havenCounts = {}local RADIUS = 160 --retreat zone radiuslocal DIAM = RADIUS * 2local RADSQ = RADIUS * RADIUS ---------------------------------------------------------------------------------- functionslocal function explode(div,str)  if (div=='') then return false end  local pos,arr = 0,{}  -- for each divider found  for st,sp in function() return string.find(str,div,pos,true) end do    table.insert(arr,string.sub(str,pos,st-1)) -- Attach chars left of current divider    pos = sp + 1 -- Jump past current divider  end  table.insert(arr,string.sub(str,pos)) -- Attach chars right of last divider  return arrend------ Havenslocal function FindClosestHaven(teamID, sx, _, sz)  local closestDistSqr = math.huge  local cx, cy, cz  --  closest coordinates  local havensTeam = havens[teamID] or {}  for havenID, havenPosition in pairs(havensTeam) do    local hx, hy, hz = havenPosition[1], havenPosition[2], havenPosition[3]    if hx then       local dSquared = (hx - sx)^2 + (hz - sz)^2      if (dSquared < closestDistSqr) then        closestDistSqr = dSquared        cx = hx; cy = hy; cz = hz		cHavenID = havenID      end    end  end  if (not cx) then return -1, -1, -1, -1 end  -- should not happen  return cx, cy, cz, closestDistSqr, cHavenIDendlocal function FindClosestHavenToUnit(unitID)  local ux, _, uz = spGetUnitPosition(unitID)  local teamID = spGetUnitTeam(unitID)  return FindClosestHaven(teamID, ux, _, uz)endlocal function UpdateHavens(teamID)	havenData = {}	for havenID, havenPos in pairs(havens[teamID]) do		havenData[#havenData + 1] = table.concat(havenPos, ',')	end	havenData = table.concat(havenData, '|')	Spring.SetTeamRulesParam(teamID, "havens", havenData, {allied = true})endlocal function AddHaven(teamID, x, y, z)		if not havenCounts[teamID] then		havenCounts[teamID] = 0	end	local count = havenCounts[teamID]	havenCounts[teamID] = count + 1	if not havens[teamID] then		havens[teamID] = {}	end	local count = havenCounts[teamID]	havens[teamID][count] = {x, y, z}	UpdateHavens(teamID)endlocal function RemoveHaven(teamID, havenID)	if havens[teamID][havenID] then		havenCounts[teamID] = havenCounts[teamID] - 1	end	havens[teamID][havenID] = nil	UpdateHavens(teamID)endlocal function ToggleHaven(teamID, x,y,z)	local _, _, _, dSquared, closestHavenID = FindClosestHaven(teamID, x,y,z)	if dSquared ~= -1 and dSquared < RADSQ then		RemoveHaven(teamID, closestHavenID)	else		AddHaven(teamID, x,y,z)	endend------------- Retreat functionslocal function StopRetreating(unitID)	local cmds = Spring.GetUnitCommands(unitID)	local first = true	for _,cmd in ipairs(cmds) do		--echo(' -- tag, id =', cmd.tag, CMD[cmd.id])		if cmd.tag == retreaterTagsMove[unitID] or cmd.tag == retreaterTagsWait[unitID] then			--echo(' -- removing ', CMD[cmd.id], cmd.tag)			spGiveOrderToUnit(unitID, CMD.REMOVE, { cmd.tag }, {})		elseif first and cmd.id == CMD.WAIT then			spGiveOrderToUnit(unitID, CMD.WAIT, {}, {})		end		first = false	end	retreaterTagsMove[unitID] = nil	retreaterTagsWait[unitID] = nil		local returnUnitPos = returnUnit[unitID]	if returnUnitPos then		spGiveOrderToUnit(unitID, CMD.MOVE, returnUnitPos, {})	endendlocal function IsUnitIdle(unitID)	local cQueue = spGetCommandQueue(unitID, 1)	local moving = cQueue and #cQueue > 0	return not movingendlocal function GiveRetreatOrders(unitID, hx,hy,hz)	if retreaterTagsMove[unitID] then return end		if IsUnitIdle(unitID) then		local ux, uy, uz = spGetUnitPosition(unitID)		returnUnit[unitID] = {ux,uy,uz}	else		returnUnit[unitID] = nil	end			local insertIndex = 0	--echo ('GiveRetreatOrders',unitID, hx, hy, hz)	spGiveOrderToUnit(unitID, CMD.INSERT, { insertIndex, CMD.WAIT, CMD.OPT_SHIFT}, {"alt"}) --SHIFT W	spGiveOrderToUnit(unitID, CMD.INSERT, { insertIndex, CMD.MOVE, CMD.OPT_INTERNAL, hx, hy, hz}, {"alt"}) -- ALT makes the 0 positional		local cmds = Spring.GetUnitCommands(unitID,2)	local tag1, tag2 = cmds[1].tag, cmds[2] and cmds[2].tag		retreaterTagsMove[unitID] = tag1	retreaterTagsWait[unitID] = tag2endlocal function StartRetreat(unitID)	local hx, hy, hz, dSquared = FindClosestHavenToUnit(unitID)	hx = hx + RADIUS - rand(10, DIAM)	--hy = hy	hz = hz + RADIUS- rand(10, DIAM)	--echo(hx,hz)	if dSquared > RADSQ then		local insertIndex = 0				GiveRetreatOrders(unitID, hx, hy, hz)	endendlocal function CheckRetreat(unitID)	local isRetreating = retreaterTagsMove[unitID]	local want = wantRetreat[unitID]	if want and not isRetreating then		StartRetreat(unitID)	elseif not want and isRetreating then		StopRetreating(unitID)	endendlocal function SetWantRetreat(unitID, want)	local isRetreating = retreaterTagsMove[unitID]	wantRetreat[unitID] = want	Spring.SetUnitRulesParam(unitID, "retreat", want and 1 or 0) endlocal function CheckSetWantRetreat(unitID)	local health, maxHealth = spGetUnitHealth(unitID)	if not health then return end	retreatState = spGetUnitRulesParam(unitID, 'retreatState')	if not retreatState then return end		local healthRatio = health / maxHealth	local threshold = retreatState * 0.3	local _,_,inBuild = spGetUnitIsStunned(unitID)	if healthRatio < threshold and (not inBuild) then		SetWantRetreat(unitID, true)	elseif healthRatio >= 1 then		SetWantRetreat(unitID, nil)	endendlocal function RemoveUnitData(unitID)	SetWantRetreat(unitID, nil)	retreatables[unitID] = nil	retreatMoveOrders[unitID] = nil	retreatRearmOrders[unitID] = nil	mobileUnits[unitID] = nilendlocal function SetRetreatState(unitID, state, retID) 	local cmdDescID = spFindUnitCmdDesc(unitID, retID)	if (cmdDescID) then		CommandDesc.params[1] = state		spEditUnitCmdDesc(unitID, cmdDescID, {			params = CommandDesc.params,			tooltip = Tooltips[state]		})		spSetUnitRulesParam(unitID, 'retreatState', state)		SetWantRetreat(unitID, nil)	endend function RetreatCommand(unitID, cmdID, cmdParams, cmdOptions)	local state = cmdParams[1]	if cmdOptions.right then 		state = 0	elseif state == 0 then		state = 1	end	state = state % StateCount	SetRetreatState(unitID, state, cmdID)end---------------------------------------------------------------------------------- callinsfunction gadget:UnitCreated(unitID, unitDefID, teamID, builderID, _, _)	local ud = UnitDefs[unitDefID]	--add inherit or is this handled by unit states?	if ud.canMove then		retreatables[unitID] = true		CommandDesc.params[1] = DefaultState		spInsertUnitCmdDesc(unitID, CommandOrder, CommandDesc)		SetWantRetreat(unitID, nil)	end	endfunction gadget:RecvLuaMsg(msg, playerID)	--echo('recv',msg, playerID)	local msg_table = explode('|', msg)	if msg_table[1] ~= 'sethaven' then		return	end		local _,_, spec, teamID, allianceID = Spring.GetPlayerInfo(playerID)	local unitID = msg_table[2]+0	local x = msg_table[2]+0	local y = msg_table[3]+0	local z = msg_table[4]+0		if not z then		return		--fixme, yell at players	end 	ToggleHaven( teamID, x, y, z )endfunction gadget:AllowCommand(unitID, unitDefID, unitTeam, cmdID, cmdParams, cmdOptions)		if cmdID == CMD_RETREAT then		RetreatCommand(unitID, cmdID, cmdParams, cmdOptions)  		return false  -- command was used	end		    if retreaterTagsMove[unitID] and not cmdOptions.shift		--need checks here because of random commands like maxwantedspeed, find better way		and ( cmdID == CMD.MOVE or cmdID == CMD.FIGHT or cmdID == CMD.STOP or cmdID == CMD.ATTACK or cmdID == CMD.GUARD or cmdID == CMD.PATROL )		then				returnUnit[unitID] = nil		retreaterTagsMove[unitID] = nil		retreaterTagsWait[unitID] = nil    end    		return trueendfunction gadget:GameFrame(gameFrame)	local frame32 = gameFrame % 32 == 0 -- ~1 second	--local frame160 = gameFrame % 160 == 0 -- ~5 second		if frame32 then		for unitID, _ in pairs(retreatables) do			if retreatables[unitID] then				CheckSetWantRetreat(unitID)				CheckRetreat(unitID)			end		end -- for	end --if frame 1/30	end	function gadget:Initialize()	for _,unitID in pairs(Spring.GetAllUnits()) do		local unitDefID = Spring.GetUnitDefID(unitID);		gadget:UnitCreated(unitID, unitDefID, nil, 1, _, _)	end		Spring.SetGameRulesParam('retreatZoneRadius', RADIUS)	end--synced--------------------------------------------------------------------------------------------------------------------------------------------------------------------------end--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
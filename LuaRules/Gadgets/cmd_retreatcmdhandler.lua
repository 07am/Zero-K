----------------------------------------------------------------------------------------------------------------------------------------------------------------function gadget:GetInfo()  return {    name      = "Retreat Command Handler",    desc      = "Handle commands for retreating units far better than a widget could",    author    = "CarRepairer",    date      = "2013-09-22-12",    license   = "GNU GPL, v2 or later",    layer     = 0,    enabled   = true,  }end----------------------------------------------------------------------------------------------------------------------------------------------------------------local echo = Spring.Echo----------------------------------------------------------------------------------------------------------------------------------------------------------------if gadgetHandler:IsSyncedCode() then -- SYNCED-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- varslocal spGiveOrderToUnit = Spring.GiveOrderToUnitlocal retreaters = {}local retreaterTagsMove = {}local retreaterTagsWait = {}local giveRetreatOrders = {}local removeRetreatCmds = {}local checkAllow = true---------------------------------------------------------------------------------- functionslocal function explode(div,str)  if (div=='') then return false end  local pos,arr = 0,{}  -- for each divider found  for st,sp in function() return string.find(str,div,pos,true) end do    table.insert(arr,string.sub(str,pos,st-1)) -- Attach chars left of current divider    pos = sp + 1 -- Jump past current divider  end  table.insert(arr,string.sub(str,pos)) -- Attach chars right of last divider  return arrend	local function RemoveRetreatCmds(unitID)	local cmds = Spring.GetUnitCommands(unitID)	for _,cmd in ipairs(cmds) do		if cmd.tag == retreaterTagsMove[unitID] or cmd.tag == retreaterTagsWait[unitID] then			--echo(' -- removing ', CMD[cmd.id], cmd.tag)			spGiveOrderToUnit(unitID, CMD.REMOVE, { cmd.tag }, {})		end	end	retreaterTagsMove[unitID] = nil	retreaterTagsWait[unitID] = nilendlocal function GiveRetreatOrders(unitID)	if retreaterTagsMove[unitID] then return end		local insertIndex = 0	local hx,hy,hz = unpack(retreaters[unitID])	--echo ('GiveRetreatOrders',unitID, hx, hy, hz)	spGiveOrderToUnit(unitID, CMD.INSERT, { insertIndex, CMD.WAIT, CMD.OPT_SHIFT}, {"alt"}) --SHIFT W	spGiveOrderToUnit(unitID, CMD.INSERT, { insertIndex, CMD.MOVE, CMD.OPT_INTERNAL, hx, hy, hz}, {"alt"}) -- ALT makes the 0 positional			local cmds = Spring.GetUnitCommands(unitID,2)	local tag1, tag2 = cmds[1].tag, cmds[2] and cmds[2].tag	retreaterTagsMove[unitID] = tag1	retreaterTagsWait[unitID] = tag2end---------------------------------------------------------------------------------- callinsfunction gadget:RecvLuaMsg(msg, playerID)	--echo('recv',msg, playerID)	local msg_table = explode('|', msg)	if msg_table[1] ~= 'retreat' then		return	end		local _,_, spec, teamID, allianceID = Spring.GetPlayerInfo(playerID)		local unitID = msg_table[2]+0		if		not Spring.ValidUnitID(unitID) 		or Spring.GetUnitTeam(unitID) ~= teamID		then		return	end --fixme, yell at players			if msg_table[3] == 'cancel' then		retreaters[unitID] = nil		--echo 'cancel retreat'		removeRetreatCmds[unitID] = true	else		local hx,hy,hz = msg_table[3]+0, msg_table[4]+0, msg_table[5]+0				if not hz then			return		end --fixme, yell at players				if not retreaters[unitID] then			--echo 'add retreat'			retreaters[unitID] = {hx,hy,hz}			giveRetreatOrders[unitID] = true		end	end	endfunction gadget:AllowCommand(unitID, unitDefID, unitTeam, cmdID, cmdParams, cmdOptions)	if not checkAllow		or not retreaters[unitID]		or cmdOptions.shift		then		return true	end		    if cmdID == CMD.MOVE or cmdID == CMD.FIGHT or cmdID == CMD.STOP then		retreaterTagsMove[unitID] = nil		retreaterTagsWait[unitID] = nil		giveRetreatOrders[unitID] = true    end    	return trueendfunction gadget:GameFrame(f)	checkAllow = false		for unitID, _ in pairs(giveRetreatOrders) do		GiveRetreatOrders(unitID)	end	giveRetreatOrders = {}		for unitID, _ in pairs(removeRetreatCmds) do		RemoveRetreatCmds(unitID)	end	removeRetreatCmds = {}		checkAllow = trueend	function gadget:Initialize()end--synced--------------------------------------------------------------------------------------------------------------------------------------------------------------------------end--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
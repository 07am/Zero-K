#include "constants.h"

piece  flare1, base, spindle, firepoint, radardish, feet, turret, bigbox,
       radarbase, gunbarrel, magazine;

static-var  pivot, facing;

// Signal definitions
#define SIG_AIM		2
#define SIG_IDLE	1


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

IdleAnim()
{
	signal SIG_IDLE;
	set-signal-mask SIG_IDLE;
	while( TRUE )
	{
		if (pivot == 0) 
			{turn spindle to y-axis (facing + <20>) speed <30>;}
		else 
			{turn spindle to y-axis (facing - <20>) speed <30>;}
		pivot = not pivot;
		sleep 4000;
	}
}

RestoreAfterDelay()
{
	sleep 6000;
	start-script IdleAnim();
}

Create()
{
	pivot = 1;
	facing = 0;
	start-script SmokeUnit();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	spin radardish around y-axis speed <120>;
	start-script IdleAnim();
}

AimPrimary(heading, pitch)
{
	signal SIG_IDLE;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn spindle to y-axis heading speed <90>;
	turn gunbarrel to x-axis <0.> - pitch speed <350>;
	wait-for-turn spindle  around y-axis;
	wait-for-turn gunbarrel around x-axis;
	facing = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
}

QueryPrimary(piecenum)
{
	piecenum = firepoint;
}

AimFromPrimary(piecenum)
{
	piecenum = firepoint;
}

Killed(severity, corpsetype)
{
	hide flare1;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode feet type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode spindle type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		explode bigbox type BITMAPONLY | BITMAP5;
		explode radardish type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode radarbase type BITMAPONLY | BITMAP3;
		explode gunbarrel type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode feet type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode spindle type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		explode bigbox type BITMAPONLY | BITMAP5;
		explode radardish type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode radarbase type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode gunbarrel type BITMAPONLY | BITMAP4;
		explode magazine type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 2;
		explode feet type BITMAPONLY | BITMAP1;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode spindle type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		explode bigbox type BITMAPONLY | BITMAP5;
		explode radardish type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode radarbase type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode gunbarrel type BITMAPONLY | BITMAP4;
		explode magazine type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 2;
	explode feet type BITMAPONLY | BITMAP1;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode spindle type BITMAPONLY | BITMAP3;
	explode turret type BITMAPONLY | BITMAP4;
	explode bigbox type BITMAPONLY | BITMAP5;
	explode radardish type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode radarbase type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode gunbarrel type BITMAPONLY | BITMAP4;
	explode magazine type BITMAPONLY | BITMAP5;
}

//linear constant 65536

piece head,hips,lshoulder,lbcover,ltcover,rshoulder,rbcover,rtcover,chest,rthigh,lthigh,lshin,rshin,rfoot,lfoot,lmissile,rmissile,rmuzzle,rexhaust,lmuzzle,lexhaust;

static-var isMoving, isAiming, shooting_num, gun;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			16

#include "sfxtype.h"
#include "exptype.h"		

DamageControl()
{
	while (get BUILD_PERCENT_LEFT) {
		sleep 1000;
	}
	var health;
	while (TRUE)
	{
		health = get HEALTH;
		if (health < 50)
		{
			emit-sfx SFXTYPE_WHITESMOKE from hips;
			if (health < 25)
			{	
				emit-sfx SFXTYPE_BLACKSMOKE from chest;
			}
		}
		sleep 1000;
	}
}

walk()
{
	turn rthigh 	to y-axis <0> 		speed <135>;
	turn lthigh 	to y-axis <0> 		speed <130>;
	turn hips		to x-axis <0>		speed <125>;
	
	turn rthigh 	to z-axis <0> 		speed <135>;
	turn lthigh 	to z-axis <0> 		speed <130>;
	turn lfoot 	to z-axis <0> 		speed <130>;
	turn rfoot 	to z-axis <0> 		speed <130>;
		
	if (isMoving)
	{
			Turn rshin to x-axis <85> speed<540>;	
			Turn rthigh to x-axis <-100> speed<270>;
			Turn lthigh to x-axis <30> speed<270>;
			wait-for-turn lthigh around x-axis;
			turn rshin to x-axis <10> speed <630>;
	}		
	if (isMoving)
	{
			Turn lshin to x-axis <85> speed<540>;
			Turn lthigh to x-axis <-100> speed<270>;
			turn rthigh to x-axis <30> speed <270>;
			wait-for-turn rthigh around x-axis;
			turn lshin to x-axis <10> speed <630>;
	}
}

stopwalk ()
{
	turn lfoot		to x-axis <0> 		speed <395>;
	turn rfoot		to x-axis <0> 		speed <395>;
	turn rthigh 	to x-axis <0> 		speed <235>;
	turn lthigh 	to x-axis <0> 		speed <230>;
	turn lshin  	to x-axis <0> 		speed <235>;
	turn rshin 	to x-axis <0> 		speed <230>;
	
	turn rthigh 	to y-axis <-20> 	speed <135>;
	turn lthigh 	to y-axis <20> 		speed <130>;
	
	turn hips		to x-axis <0>		speed <125>;
		
	turn rthigh 	to z-axis <3> 		speed <135>;
	turn lthigh 	to z-axis <-3> 		speed <130>;
	turn lfoot 	to z-axis <3> 		speed <130>;
	turn rfoot 	to z-axis <-3>		speed <130>;
}



StartMoving()
{
	isMoving = TRUE;
}

StopMoving()
{
	isMoving = FALSE;
}

MotionControl()
{
	while ( TRUE )
	{              
		IF (isMoving)
		{
			CALL-SCRIPT walk();
		}
		else
		{
			CALL-SCRIPT stopwalk();
			sleep 120; 
		}
	}
}

Create()
{
	isMoving = FALSE;
	isAiming = FALSE;
	shooting_num=1;
	hide rmuzzle;
	hide lmuzzle;
	hide rexhaust;
	hide lexhaust;
	start-script MotionControl();	
	start-script DamageControl();
}
	
QueryWeapon1(piecenum)
{
	if( gun == 0 )
	{
		piecenum = lmissile;
	}
	if( gun == 1 )
	{
		piecenum = rmissile;
	}
}

//---------------------------------------------------------------------
//gun functions;
//---------------------------------------------------------------------	
RestoreAfterDelay()
{
	sleep 2000;
	turn chest to y-axis <0> speed <100>;
	turn rtcover to x-axis <0> speed <100>;
	turn rbcover to x-axis <0> speed <100>;
	turn ltcover to x-axis <0> speed <100>;
	turn lbcover to x-axis <0> speed <100>;
	isAiming = FALSE;
}

AimFromPrimary(piecenum)
{
	piecenum = head;
}

AimWeapon1(heading,pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	isAiming = TRUE;
	turn chest to x-axis <0> now; 
	turn chest to y-axis heading speed <450>;
	turn lshoulder to x-axis <0> - pitch speed <500>;
	turn rshoulder to x-axis <0> - pitch speed <500>;
	turn rtcover to x-axis <-100> speed <400>;
	turn rbcover to x-axis <100> speed <400>;
	turn ltcover to x-axis <-100> speed <400>;
	turn lbcover to x-axis <100> speed <400>;
	wait-for-turn chest around y-axis;
	wait-for-turn lshoulder around x-axis;
	start-script RestoreAfterDelay();
	
	return(TRUE);
}
	
FireWeapon1()
{
	if (gun == 1)
	{
		emit-sfx 1024 from lmuzzle;
		emit-sfx 1025 from lexhaust;
		move lmissile to z-axis [-1] now;	
		move lmissile to z-axis [0] speed <500>;
		gun = 0;
	}
	else
	{
		emit-sfx 1024 from rmuzzle;
		emit-sfx 1025 from rexhaust;
		move rmissile to z-axis [-1] now;
		move rmissile to z-axis [0] speed <500>;
		gun = 1;
	}
}
	

Killed( severity, corpsetype )
{
	if (severity <= 25)
	{
		corpsetype = 1;
		explode hips type		BITMAPONLY;
		explode chest type		BITMAPONLY;
		explode lshoulder type	BITMAPONLY;
		explode rshoulder type	BITMAPONLY;
		explode head type		FALL | FIRE;
		return( 0 );
	}

	if (severity <= 50)
	{
		corpsetype = 1;
		explode hips type		BITMAPONLY;
		explode chest type		BITMAPONLY;
		explode lshoulder type	FALL | FIRE;
		explode rshoulder type	FALL | FIRE;
		explode head type		FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return( 0 );
	}

	corpsetype = 2;
	explode hips type		SHATTER;
	explode chest type		SHATTER;
	explode lshoulder type	SHATTER;
	explode rshoulder type	SHATTER;
	explode head type		FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	
	return( 0 );
}
// by Chris Mackey

#include "constants.h"

piece base, pelvis, torso, shield,
l_thigh, l_leg, l_foot,
r_thigh, r_leg, r_foot,
shot1, shot2, shot3, shot4, shot5, shot6, shot7, shot8;

static-var shieldpower;

// signal definitions
#define SIG_MOVE	2

walk()
{
	while( TRUE )
	{	//part one
		//right backward
		turn r_thigh to x-axis <10> speed <140>;
		wait-for-turn r_thigh around x-axis;
		turn r_thigh to x-axis <45> speed <100>;
		turn r_leg to x-axis <80> speed <140>;
		turn r_foot to x-axis <-40> speed <140>;
		//left forward
		turn l_thigh to x-axis <-40> speed <220>;
		turn l_leg to x-axis <80> speed <220>;
		turn l_foot to x-axis <-10> speed <190>;
		wait-for-turn l_thigh around x-axis;
		
		//part two
		move base to y-axis [0] speed [1.6];
		//right back to front
		turn r_leg to x-axis <-10> speed <150>;
		turn r_foot to x-axis <-10> speed <150>;
		//left front to back
		turn l_thigh to x-axis <-10> speed <140>;
		turn l_leg to x-axis <30> speed <160>;
		turn l_foot to x-axis <-15> speed <60>;
		sleep 100;
		
		//part three
		move base to y-axis [3] speed [1];
		//left backward
		turn l_thigh to x-axis <10> speed <140>;
		wait-for-turn l_thigh around x-axis;
		turn l_thigh to x-axis <45> speed <100>;
		turn l_leg to x-axis <80> speed <140>;
		turn l_foot to x-axis <-40> speed <140>;
		//right forward
		turn r_thigh to x-axis <-40> speed <220>;
		turn r_leg to x-axis <80> speed <220>;
		turn r_foot to x-axis <-10> speed <190>;
		wait-for-turn r_thigh around x-axis;
		
		//part four
		move base to y-axis [0] speed [1.6];
		//left back to front
		turn l_leg to x-axis <-10> speed <150>;
		turn l_foot to x-axis <-10> speed <150>;
		// right front to back
		turn r_thigh to x-axis <-10> speed <140>;
		turn r_leg to x-axis <30> speed <160>;
		turn r_foot to x-axis <-15> speed <60>;
		sleep 100;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from pelvis;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	call-script walk();
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	//move all the pieces to their original spots
	turn r_thigh to x-axis <30> speed <200>;
	turn r_leg to x-axis <0> speed <200>;
	turn r_foot to x-axis <0> speed <200>;
	
	turn l_thigh to x-axis <30> speed <200>;
	turn l_leg to x-axis <0> speed <200>;
	turn l_foot to x-axis <0> speed <200>;
	
	move base to y-axis [0] speed [10];
}

Create()
{
	set SHIELD_POWER to 200;
	start-script StopMoving();
	start-script SmokeUnit();
	turn r_thigh to x-axis <30> now;
	turn l_thigh to x-axis <30> now;
}

AimWeapon1() 
{
	return 1;
}

AimFromWeapon1(piecenum)
{
	piecenum = shield;
}

QueryWeapon1(piecenum) 
{
	piecenum = shield;
}

AimFromWeapon2(piecenum) 
{
	piecenum = shot1;
}

QueryWeapon2(piecenum) 
{
	piecenum = shot1;
}

AimWeapon2() 
{
	if (get SHIELD_POWER > 100);
	{
		return 1;
	}
}

FireWeapon2() 
{
shieldpower = (get SHIELD_POWER);
set SHIELD_POWER to (shieldpower - 100);
}

AimFromWeapon3(piecenum) 
{
	piecenum = shot2;
}

QueryWeapon3(piecenum) 
{
	piecenum = shot2;
}

AimWeapon3() 
{
	if (get SHIELD_POWER > 100);
	{
		return 1;
	}
}

FireWeapon3() 
{
shieldpower = (get SHIELD_POWER);
set SHIELD_POWER to (shieldpower - 100);
}

AimFromWeapon4(piecenum) 
{
	piecenum = shot3;
}

QueryWeapon4(piecenum) 
{
	piecenum = shot3;
}

AimWeapon4() 
{
	if (get SHIELD_POWER > 100);
	{
		return 1;
	}
}

FireWeapon4() 
{
shieldpower = (get SHIELD_POWER);
set SHIELD_POWER to (shieldpower - 100);
}

AimFromWeapon5(piecenum) 
{
	piecenum = shot4;
}

QueryWeapon5(piecenum) 
{
	piecenum = shot4;
}

AimWeapon5() 
{
	if (get SHIELD_POWER > 100);
	{
		return 1;
	}
}

FireWeapon5() 
{
shieldpower = (get SHIELD_POWER);
set SHIELD_POWER to (shieldpower - 100);
}

AimFromWeapon6(piecenum)
{
	piecenum = shot5;
}

QueryWeapon6(piecenum) 
{
	piecenum = shot5;
}

AimWeapon6() 
{
	if (get SHIELD_POWER > 100);
	{
		return 1;
	}
}

FireWeapon6() 
{
shieldpower = (get SHIELD_POWER);
set SHIELD_POWER to (shieldpower - 100);
}

AimFromWeapon7(piecenum) 
{
	piecenum = shot6;
}

QueryWeapon7(piecenum) 
{
	piecenum = shot6;
}

AimWeapon7() 
{
	if (get SHIELD_POWER > 100);
	{
		return 1;
	}
}

FireWeapon7() 
{
shieldpower = (get SHIELD_POWER);
set SHIELD_POWER to (shieldpower - 100);
}

AimFromWeapon8(piecenum) 
{
	piecenum = shot7;
}

QueryWeapon8(piecenum) 
{
	piecenum = shot7;
}

AimWeapon8() 
{
	if (get SHIELD_POWER > 100);
	{
		return 1;
	}
}

FireWeapon8() 
{
shieldpower = (get SHIELD_POWER);
set SHIELD_POWER to (shieldpower - 100);
}

AimFromWeapon9(piecenum) 
{
	piecenum = shot8;
}

QueryWeapon9(piecenum) 
{
	piecenum = shot8;
}

AimWeapon9() 
{
	if (get SHIELD_POWER > 100);
	{
		return 1;
	}
}

FireWeapon9() 
{
shieldpower = (get SHIELD_POWER);
set SHIELD_POWER to (shieldpower - 100);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode l_foot type BITMAPONLY | BITMAP4;
		explode l_leg type BITMAPONLY | BITMAP5;
		explode l_thigh type BITMAPONLY | BITMAP1;
		explode r_foot type BITMAPONLY | BITMAP4;
		explode r_leg type BITMAPONLY | BITMAP5;
		explode r_thigh type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type FALL | BITMAP1;
		explode l_foot type FALL | BITMAP4;
		explode l_leg type FALL | BITMAP5;
		explode l_thigh type FALL | BITMAP1;
		explode r_foot type FALL | BITMAP4;
		explode r_leg type FALL | BITMAP5;
		explode r_thigh type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode l_foot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode l_leg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode l_thigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode r_foot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode r_leg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode r_thigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode l_foot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode l_leg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode l_thigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode r_foot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode r_leg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode r_thigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}


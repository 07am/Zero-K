//linear constant 65536

#include "constants.h"

piece  base, ground, head, emit1, emit2, emit3, emit4;

static-var  statechg_DesiredState, statechg_StateChanging, on;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from head;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

TargetingLaser()
{
	while( on == 1 )
	{
		turn emit1 to x-axis <-50> now;
		turn emit2 to x-axis <-40> now;
		turn emit3 to x-axis <-20> now;
		turn emit4 to x-axis <-5> now;
		
		emit-sfx 2048 from emit1;
		emit-sfx 2048 from emit2;
		emit-sfx 2048 from emit3;
		emit-sfx 2048 from emit4;
		
		sleep 20;

		turn emit1 to x-axis <-30> now;
		turn emit2 to x-axis <-10> now;
		turn emit3 to x-axis <10> now;
		turn emit4 to x-axis <30> now;
		
		emit-sfx 2048 from emit1;
		emit-sfx 2048 from emit2;
		emit-sfx 2048 from emit3;
		emit-sfx 2048 from emit4;
		
		sleep 20;
		
		turn emit1 to x-axis <5> now;
		turn emit2 to x-axis <20> now;
		turn emit3 to x-axis <40> now;
		turn emit4 to x-axis <50> now;
		
		emit-sfx 2048 from emit1;
		emit-sfx 2048 from emit2;
		emit-sfx 2048 from emit3;
		emit-sfx 2048 from emit4;
		
		sleep 20;
	}
}

Go()
{
	//start-script TargetingLaser();
	on = 1;
	spin head around y-axis speed <60.010989>;
	
}

Stop()
{
	on = 0;
	spin head around y-axis speed <0.000000>;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = ground;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode ground type BITMAPONLY | BITMAP1;
		explode head type FALL | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode ground type BITMAPONLY | BITMAP1;
		explode head type FALL | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 2;
		explode ground type BITMAPONLY | BITMAP1;
		explode head type FALL | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 2;
		explode ground type BITMAPONLY | BITMAP1;
		explode head type FALL | EXPLODE_ON_HIT | BITMAP1;
}

// by Chris Mackey

#include "constants.h"


piece base, torso, shield, lathe, emit,
lthigh, luppercalf, llowercalf, lfoot,
rthigh, ruppercalf, rlowercalf, rfoot; 

static-var bMoving, bAiming, Static_Var_3, gun_1;

#define SIG_BUILD						1

lua_QueryNanoPiece() 
{
  return 0;
}

walk()
{
	
//	turn lthigh to x-axis <0> speed <60>; //back
//	turn rthigh to x-axis <-60> speed <60>; //forward
	
//	turn rfoot to x-axis <70> speed <100>;
//	turn lfoot to x-axis <25> speed <100>;
	
//	move base to y-axis [2] speed [4];
//	turn base to z-axis <8> speed <15>;

	if( bMoving )
	{
		move rlowercalf to z-axis [-1.1] speed [3]; //down
		move llowercalf to z-axis [0] speed [2]; //up
		move rlowercalf to y-axis [-1.1] speed [3]; //down
		move llowercalf to y-axis [0] speed [2]; //up
		
		sleep 600;
	}
	if( bMoving )
	{
		turn rthigh to x-axis <0> speed <60>; //back
		turn lthigh to x-axis <60> speed <60>; //forward
		
		turn ruppercalf to x-axis <0> speed <40>; //back
		turn luppercalf to x-axis <-40> speed <40>; //forward
		
		turn rfoot to x-axis <-10> speed <50>;
		turn lfoot to x-axis <-30> speed <50>;
		
		turn base to z-axis <-4> speed <15>;
		
		sleep 200;
	}
	
	if( bMoving )
	{
		move llowercalf to z-axis [-1.1] speed [3]; //down
		move rlowercalf to z-axis [0] speed [2]; //up
		move llowercalf to y-axis [-1.1] speed [3]; //down
		move rlowercalf to y-axis [0] speed [2]; //up
		
		sleep 600;
	}
	if( bMoving )
	{
		turn lthigh to x-axis <0> speed <60>; //back
		turn rthigh to x-axis <60> speed <60>; //forward
		
		turn luppercalf to x-axis <0> speed <40>; //back
		turn ruppercalf to x-axis <-40> speed <40>; //forward
		
		turn lfoot to x-axis <-10> speed <50>;
		turn rfoot to x-axis <-30> speed <50>;
		
		turn base to z-axis <4> speed <15>;
		
		sleep 200;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		if( moving )
		{
			Static_Var_3 = 0;
			call-script walk();
		}
		if( !moving )
		{
			Static_Var_3 = 1;
			if( justmoved ) // restores mbot to stationary position
			{
				turn rthigh to x-axis <0> speed <200>;
				turn lthigh to x-axis <0> speed <200>;
					
				move ruppercalf to z-axis [0] speed [200];
				move luppercalf to z-axis [0] speed [200];
					
				turn rfoot to x-axis <0> speed <200>;
				turn lfoot to x-axis <0> speed <200>;
				
				move base to y-axis [0] speed [200];
				move base to z-axis [0] speed [200];
				turn base to z-axis <0> speed <200>;
				turn torso to y-axis <0> speed <200>;
			}
					justmoved = FALSE;
		}
		sleep 100;
	}
}

Create()
{
	bMoving = FALSE;
	Static_Var_3 = 1;
	start-script MotionControl();
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(s)
{
	s = base;
}

StartBuilding(heading, pitch)
{
	signal SIG_BUILD;
	set-signal-mask SIG_BUILD;
	turn torso to y-axis heading speed <200>;
	turn shield to x-axis <-70> speed <100>;
	wait-for-turn torso around y-axis;
	
	set INBUILDSTANCE to 1;
	
}

StopBuilding()
{
	signal SIG_BUILD;
	set-signal-mask SIG_BUILD;
	sleep 100;
	set-signal-mask 0;
	set INBUILDSTANCE to 0;
	
	turn torso to y-axis <0> speed <40>;
	turn shield to x-axis <0> speed <40>;
}

QueryNanoPiece(piecenum)
{
	piecenum = emit;
	call-script lua_QueryNanoPiece(piecenum);
}

Killed(severity, corpsetype)
{
		corpsetype = 1;
		explode torso type BITMAPONLY | BITMAP2;
		explode lfoot type BITMAPONLY | BITMAP4;
		explode lthigh type BITMAPONLY | BITMAP2;
		explode rfoot type BITMAPONLY | BITMAP1;
		explode rthigh type BITMAPONLY | BITMAP4;
		explode base type BITMAPONLY | BITMAP1;
		return (0);

}

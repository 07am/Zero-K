piece head,hips,lshoulder,lforearm,rshoulder,rforearm,halberd,
blade,chest,rthigh,lthigh,lshin,rshin,rfoot,lfoot;

static-var isMoving, isAiming,shooting_num;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			16

#include "sfxtype.h"
#include "exptype.h"

DamageControl()
{
	while (get BUILD_PERCENT_LEFT) {
		sleep 1000;
	}
	var health;
	while (TRUE)
	{
		health = get HEALTH;
		if (health < 50)
		{
			emit-sfx SFXTYPE_WHITESMOKE from hips;
			if (health < 25)
			{	
				emit-sfx SFXTYPE_BLACKSMOKE from chest;
			}
		}
		sleep 1000;
	}
}

walk()
{
	turn rthigh 	to y-axis <0> 		speed <135>;
	turn lthigh 	to y-axis <0> 		speed <130>;
	
	turn rthigh 	to z-axis <0> 		speed <135>;
	turn lthigh 	to z-axis <0> 		speed <130>;
	turn lfoot 	to z-axis <0> 		speed <130>;
	turn rfoot 	to z-axis <0> 		speed <130>;
	
	turn lforearm	to x-axis <0> 	speed <250>;			
	turn lforearm	to z-axis <0> 		speed <250>;
	turn lforearm	to y-axis <0> 	speed <250>;
			
		if (isMoving)
		{
			turn rshoulder to x-axis <70> speed <135>;
			turn rshoulder to y-axis <15> speed <270>;
			turn rforearm to x-axis <-40> speed <270>;
			turn lshoulder to x-axis <-20> speed <135>;
			turn lshoulder to y-axis <-15> speed <270>;
			turn lforearm to x-axis <-40> speed <270>;
			Turn rshin to x-axis <85> speed<540>;	
			Turn rthigh to x-axis <-100> speed<270>;
			Turn lthigh to x-axis <30> speed<270>;
			Turn chest to y-axis <20> speed <90>;	
			wait-for-move hips along y-axis;		
			move hips to y-axis [1.2] speed <8400>;
			wait-for-move hips along y-axis;
			turn rshin to x-axis <10> speed <630>;
			move hips to y-axis [0] speed <8400>;
		}		
		if (isMoving)
		{
			turn rshoulder to x-axis <-20> speed <135>;
			turn lshoulder to x-axis <70> speed <135>;
			Turn lshin to x-axis <85> speed<540>;
			Turn lthigh to x-axis <-100> speed<270>;
			turn rthigh to x-axis <30> speed <270>;
			Turn chest to y-axis <-20> speed <90>;
			wait-for-move hips along y-axis;
			move hips to y-axis [1.2] speed <8400>;	
			wait-for-move hips along y-axis;
			turn lshin to x-axis <10> speed <630>;
			move hips to y-axis [0] speed <8400>;
		}
			
	
	turn lforearm	to x-axis <0> 		speed <250>;			
	turn lforearm	to z-axis <0> 		speed <250>;
	turn lforearm	to y-axis <0> 		speed <250>;
	turn rshoulder to x-axis <0> speed <270>;
	turn rshoulder to y-axis <0> speed <270>;
	turn rforearm to x-axis <0> speed <270>;
	turn lshoulder to x-axis <0> speed <270>;
	turn lshoulder to y-axis <0> speed <270>;
	turn rshoulder to x-axis <0> speed <270>;
	turn lshoulder to x-axis <0> speed <270>;
	turn chest 	to z-axis <0> 		speed <270>;
}


shootwalk()
{
	turn rthigh 	to y-axis <0> 		speed <135>;
	turn lthigh 	to y-axis <0> 		speed <130>;
	
	turn rthigh 	to z-axis <0> 		speed <135>;
	turn lthigh 	to z-axis <0> 		speed <130>;
	turn lfoot 	to z-axis <0> 		speed <130>;
	turn rfoot 	to z-axis <0> 		speed <130>;
		
	if (isMoving)
		{
			Turn rshin to x-axis <85> speed<540>;	
			Turn rthigh to x-axis <-100> speed<270>;
			Turn lthigh to x-axis <30> speed<270>;
			wait-for-move hips along y-axis;		
			move hips to y-axis [1.2] speed <8400>;
			wait-for-move hips along y-axis;
			turn rshin to x-axis <10> speed <630>;
			move hips to y-axis [0] speed <8400>;
		}		
			if (isMoving)
		{
			Turn lshin to x-axis <85> speed<540>;
			Turn lthigh to x-axis <-100> speed<270>;
			turn rthigh to x-axis <30> speed <270>;
			wait-for-move hips along y-axis;
			move hips to y-axis [1.2] speed <8400>;	
			wait-for-move hips along y-axis;
			turn lshin to x-axis <10> speed <630>;
			move hips to y-axis [0] speed <8400>;
		}
}

stopwalk ()
{
//	turn lforearm	to x-axis <0> 		speed <450>;			
//	turn lforearm	to z-axis <0> 		speed <450>;
//	turn lforearm	to y-axis <0> 		speed <450>;
	
	turn lfoot		to x-axis <0> 		speed <395>;
	turn rfoot		to x-axis <0> 		speed <395>;
	turn lforearm  to x-axis <0> 		speed <250>;
	turn rforearm  to x-axis <0> 		speed <250>;
	turn rthigh 	to x-axis <0> 		speed <235>;
	turn lthigh 	to x-axis <0> 		speed <230>;
	turn lshin  	to x-axis <0> 		speed <235>;
	turn rshin 	to x-axis <0> 		speed <230>;
	
	turn rthigh 	to y-axis <-20> 	speed <135>;
	turn lthigh 	to y-axis <20> 		speed <130>;
	
	turn rthigh 	to z-axis <3> 		speed <135>;
	turn lthigh 	to z-axis <-3> 		speed <130>;
	turn lfoot 	to z-axis <3> 		speed <130>;
	turn rfoot 	to z-axis <-3>		speed <130>;
}



StartMoving()
{
	isMoving = TRUE;
}

StopMoving()
{
	isMoving = FALSE;
}

MotionControl()
{
	while ( TRUE )
	{              
		IF (isMoving)
		{
			IF (isAiming)
			{
				CALL-SCRIPT shootwalk();
			}
                else
			{
				CALL-SCRIPT walk();
			}
		}
		else
		{
			CALL-SCRIPT stopwalk();
			sleep 120; 
		}
	}
} 
	
Create()
{
	turn lshoulder  to x-axis <-90> now;
	isMoving = FALSE;
	isAiming = FALSE;
	shooting_num=1;
	start-script MotionControl();	
	start-script DamageControl();
}
	
SweetSpot(piecenum)
{
	piecenum=chest;
}	
	
AimFromPrimary(piecenum)
{
	piecenum=chest;
}

FireWeapon1(piecenum)
{
	turn lshoulder  to x-axis <0> speed <480>;
	turn lforearm  to y-axis <-30> speed <580>;
//	turn lforearm  to z-axis <-40> speed <580>;
	move halberd to z-axis [5] speed [40];
	sleep 800;
	turn lforearm to y-axis <10> speed <220>;
	turn lshoulder to x-axis <-110> speed <130>;
	move halberd to z-axis [0] speed [30];
}

QueryPrimary(piecenum)
{
	piecenum=head;
}

AimFromScondary(piecenum)
{
	piecenum=chest;
}

RestoreAfterDelay()
{
	sleep 1000;
	turn chest 		to y-axis <0> speed <235>;
	isAiming = FALSE;
}

AimPrimary(heading,pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	isAiming = TRUE;
	turn hips to x-axis <0> now;
	turn chest to x-axis <0> now; 
	turn chest to y-axis heading speed <450>;

	wait-for-turn chest around y-axis;
	wait-for-turn lshoulder around x-axis;
	start-script RestoreAfterDelay();

	return(TRUE);
}
	
Shot1(unknown)
{
}
	

Killed( severity, corpsetype )
{
	if (severity <= 25)
	{
		corpsetype = 1;
		explode hips type		SHATTER;
		explode chest type		SHATTER;
		explode lshoulder type	SHATTER;
		explode rshoulder type	SHATTER;
		explode head type		FALL | FIRE | BITMAP2;
		return( 0 );
	}

	if (severity <= 50)
	{
		corpsetype = 2;
		explode hips type		SHATTER;
		explode chest type		SHATTER;
		explode lshoulder type	FALL | FIRE | BITMAP2;
		explode rshoulder type	FALL | FIRE | BITMAP2;
		explode head type		FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return( 0 );
	}

	corpsetype = 3;
	explode hips type		SHATTER;
	explode chest type		SHATTER;
	explode lshoulder type	SHATTER;
	explode rshoulder type	SHATTER;
	explode head type		FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	
	return( 0 );
}
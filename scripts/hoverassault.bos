#define TA			// This is a TA script

#include "constants.h"

piece  base, shield, turret, gun, flare, wake1, wake2, wake3, wake4,
       wake5, wake6, wake7, wake8, ground1, door1, door2, turretbase, rim1, rim2;

static-var  Static_Var_1, ShieldOn, wobble, random, aiming;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4

#define RESTORE_DELAY		1100


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

WobbleUnit()
{
	while( TRUE )
	{
		if( wobble == TRUE )
		{
			move base to y-axis [0.800000] speed [1.20000];
		}
		if( wobble == FALSE )
		{
			move base to y-axis [-0.800000] speed [1.20000];
		}
		wobble = !wobble;
		sleep 750;
	}
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.000000>;
	turn base to z-axis anglez speed <50.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 <= 2 )
		{
			random = Rand( 1, 2 );
			if( random == 1 )
			{
				emit-sfx 5 from wake1;
				emit-sfx 5 from wake3;
				emit-sfx 5 from wake5;
				emit-sfx 5 from wake7;
				emit-sfx 3 from wake1;
			 	emit-sfx 3 from wake3;
			  	emit-sfx 3 from wake5;
			  	emit-sfx 3 from wake7;
			}
			if( random == 2 )
			{
				emit-sfx 5 from wake2;
				emit-sfx 5 from wake4;
				emit-sfx 5 from wake6;
				emit-sfx 5 from wake8;
				emit-sfx 3 from wake2;
			 	emit-sfx 3 from wake4;
			  	emit-sfx 3 from wake6;
			  	emit-sfx 3 from wake8;
			}
		}
		if( Static_Var_1 > 2)
		{
			emit-sfx 1024+0 from ground1;
		}
		sleep 150;
	}
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
}

Activate()
{
	ShieldOn = 1;
}

Deactivate()
{
	ShieldOn = 0;
}

Create()
{
	set ARMORED to 1;
	wobble=TRUE;
	hide flare;
	hide ground1;
	start-script SmokeUnit();
	start-script WobbleUnit();
}

RestoreAfterDelay()
{
	sleep RESTORE_DELAY;
	set ARMORED to 1;
	move turretbase to y-axis [0] speed [20];
	turn turretbase to x-axis <0> speed <150.000000>;
	turn turret to x-axis <0> speed <150.000000>;
	turn door1 to z-axis <0> speed <150.000000>;
	turn door2 to z-axis <0> speed <150.000000>;
	turn rim1 to z-axis <0> speed <150.000000>;
	turn rim2 to z-axis <0> speed <150.000000>;
	turn gun to y-axis <0.000000> speed <300.000000>;
	turn gun to x-axis <0.000000> speed <60.000000>;
}

AimFromWeapon1(piecenum) {
	piecenum = turret;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	set ARMORED to 0;
	move turretbase to y-axis [3] speed [30];
	turn turretbase to x-axis <30> speed <150.000000>;
	turn turret to x-axis <-30> speed <150.000000>;
	turn door1 to z-axis <-80> speed <150.000000>;
	turn door2 to z-axis <80> speed <150.000000>;
	turn rim1 to z-axis <30> speed <150.000000>;
	turn rim2 to z-axis <-30> speed <150.000000>;
	turn gun to y-axis heading speed <300.000000>;
	turn gun to x-axis <0.000000> - pitch speed <60.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

QueryWeapon1(piecenum)
{
	piecenum = flare;
}

AimFromWeapon2(piecenum) {
	piecenum = base;
}

QueryWeapon2(piecenum)
{
	piecenum = shield;
}

AimWeapon2(heading, pitch)
{
	return (ShieldOn);
}

SweetSpot(piecenum)
{
	piecenum = shield;
}

FireWeapon1()
{
	emit-sfx 1025 from flare;
	aiming = TRUE;
	sleep 100;
	aiming = FALSE;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode wake1 type BITMAPONLY | BITMAP2;
		explode wake2 type BITMAPONLY | BITMAP3;
		explode wake3 type BITMAPONLY | BITMAP4;
		explode wake4 type BITMAPONLY | BITMAP5;
		explode wake5 type BITMAPONLY | BITMAP1;
		explode wake6 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		explode turret type SHATTER | BITMAP3;
		explode wake1 type FALL | BITMAP4;
		explode wake2 type FALL | BITMAP5;
		explode wake3 type FALL | BITMAP1;
		explode wake4 type FALL | BITMAP2;
		explode wake5 type FALL | BITMAP3;
		explode wake6 type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		explode turret type SHATTER | BITMAP3;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode wake3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wake5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode wake6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP2;
	explode turret type SHATTER | BITMAP3;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode wake3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode wake6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}

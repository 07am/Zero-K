//linear constant 65536

#include "constants.h"

piece  base, turret, dome, post, gun, barrel, flare, aimpoint;

static-var  opened, restore_delay;

// Signal definitions
#define SIG_AIM		2
#define SIG_OPEN	4
#define	SIG_CLOSE	8		


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Open()
{
	signal SIG_CLOSE;
	signal SIG_OPEN;
	set-signal-mask SIG_OPEN;
	
	set ARMORED to 0;
	turn dome to x-axis <-135.032967> speed <550.000000>;
	wait-for-turn dome around x-axis;
	move post to y-axis [0.000000] speed [62.500000];
	move barrel to z-axis [0.000000] speed [40.000000];
	move gun to x-axis [3.750000] speed [12.500000];
	wait-for-move post along y-axis;
	wait-for-move barrel along z-axis;
	wait-for-move gun along x-axis;
	opened = 1;
}

Close()
{
	signal SIG_CLOSE;
	signal SIG_OPEN;
	set-signal-mask SIG_CLOSE;
	
	opened = 0;
	turn gun to x-axis <0.000000> speed <90.000000>;
	move barrel to z-axis [-13.7500000] speed [40.000000];
	move gun to x-axis [0.000000] speed [12.500000];
	wait-for-move gun along x-axis;
	wait-for-turn gun around x-axis;
	wait-for-move barrel along z-axis;
	move post to y-axis [-35.000000] speed [62.500000];
	wait-for-move post along y-axis;
	turn dome to x-axis <0.000000> speed <550.000000>;
	wait-for-turn dome around x-axis;
	set ARMORED to 1;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	start-script Close();
}

Create()
{
	hide flare;
	hide aimpoint;
	dont-cache turret;
	dont-cache dome;
	dont-cache post;
	dont-cache gun;
	dont-cache barrel;
	dont-cache flare;
	dont-shade turret;
	dont-shade dome;
	dont-shade post;
	dont-shade gun;
	dont-shade barrel;
	dont-shade flare;
	restore_delay = 2000;
	opened = 1;
	start-script SmokeUnit();
	turn dome to x-axis <-135.032967> now;
	move gun to x-axis [1.500000] now;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	start-script Open();
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !opened )
	{
		sleep 250;
	}
	turn turret to y-axis heading speed <200.000000>;
	turn gun to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 from flare;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = aimpoint;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP3;
		explode post type BITMAPONLY | BITMAP1;
		explode gun type BITMAPONLY | BITMAP3;
		explode dome type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode barrel type FALL | BITMAP1;
		explode post type BITMAPONLY | BITMAP3;
		explode gun type BITMAPONLY | BITMAP3;
		explode base type SHATTER | BITMAP1;
		explode dome type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 2;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode base type BITMAPONLY | BITMAP5;
		explode post type BITMAPONLY | BITMAP3;
		explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode dome type SHATTER | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 2;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode base type BITMAPONLY | BITMAP5;
	explode post type BITMAPONLY | BITMAP3;
	explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode dome type SHATTER | BITMAP1;
	explode turret type BITMAPONLY | BITMAP2;
}

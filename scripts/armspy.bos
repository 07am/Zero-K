#include "constants.h"

piece  rfoot, body,
       rcalf, lcalf, lfoot, lthigh, rthigh, gun, fire;

static-var  bMoving, Static_Var_2, Static_Var_3, Static_Var_4;

walk()
{

	if (bMoving)
		{
			turn lthigh to x-axis <20> speed<115>;
//			turn lknee to x-axis <-40> speed<135>;
			turn lcalf to x-axis <-60> speed<135>;
			turn lfoot to x-axis <40> speed<210>;
			
			turn rthigh to x-axis <-20> speed<210>;
//			turn rknee to x-axis <-60> speed<210>;
			turn rcalf to x-axis <50> speed<210>;
			turn rfoot to x-axis <-30> speed<210>;
			
			turn body to z-axis <5> speed <20>;
			turn lthigh to z-axis <-5> speed <20>;
			turn rthigh to z-axis <-5> speed <420>;
			move body to y-axis [0.7] speed <4000>;
			wait-for-turn lthigh around x-axis;
			
			turn lthigh to x-axis <-10> speed<160>;
//			turn lknee to x-axis <15> speed<135>;
			turn lcalf to x-axis <-40> speed<250>;
			turn lfoot to x-axis <50> speed<135>;
			
			turn rthigh to x-axis <40> speed<135>;
//			turn rknee to x-axis <-35> speed<135>;
			turn rcalf to x-axis <-40> speed<135>;
			turn rfoot to x-axis <-0> speed<135>;
			
			move body to y-axis <0> speed <4000>;
			wait-for-turn lcalf around x-axis;
			
			turn rthigh to x-axis <20> speed<115>;
//			turn rknee to x-axis <-40> speed<135>;
			turn rcalf to x-axis <-60> speed<135>;
			turn rfoot to x-axis <40> speed<210>;
			
			turn lthigh to x-axis <-20> speed<210>;
//			turn lknee to x-axis <-60> speed<210>;
			turn lcalf to x-axis <50> speed<210>;
			turn lfoot to x-axis <-30> speed<420>;
			
			turn body to z-axis <-5> speed <20>;
			turn lthigh to z-axis <5> speed <20>;
			turn rthigh to z-axis <5> speed <20>;
			move body to y-axis [0.7] speed <4000>;
			wait-for-turn rthigh around x-axis;
			
			turn rthigh to x-axis <-10> speed<160>;
//			turn rknee to x-axis <15> speed<135>;
			turn rcalf to x-axis <-40> speed<250>;
			turn rfoot to x-axis <50> speed<135>;
			
			turn lthigh to x-axis <40> speed<135>;
//			turn lknee to x-axis <-35> speed<135>;
			turn lcalf to x-axis <-40> speed<135>;
			turn lfoot to x-axis <-0> speed<135>;
			move body to y-axis <0> speed <4000>;
			wait-for-turn rcalf around x-axis;
			
			}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		bmoving = bMoving;
		if( bmoving )
		{
			call-script walk();
			justmoved = TRUE;
		}
		if( !bmoving )
		{
			Static_Var_3 = 1;
			if( justmoved )
			{
				move body to y-axis [0.000000] speed [1.000000];
				turn rthigh to x-axis <0.000000> speed <200.000000>;
				turn rcalf to x-axis <0.000000> speed <200.000000>;
				turn rfoot to x-axis <0.000000> speed <200.000000>;
				turn lthigh to x-axis <0.000000> speed <200.000000>;
				turn lcalf to x-axis <0.000000> speed <200.000000>;
				turn lfoot to x-axis <0.000000> speed <200.000000>;
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

Create()
{
	bMoving = 0;
	Static_Var_2 = 0;
	Static_Var_3 = 1;
	Static_Var_4 = 0;
	start-script MotionControl();
	start-script SmokeUnit();
}


RestoreAfterDelay()
{
	sleep 2750;
	turn gun to y-axis <0.000000> speed <90.021978>;
	
	Static_Var_2 = 0;
}

StartMoving()
{
	bMoving = 1;
}

StopMoving()
{
	bMoving = 0;
}

AimPrimary(heading, pitch)
{
	turn gun to y-axis heading speed <360>; // left-right
	turn gun to x-axis <0> - pitch speed <270>; //up-down
	wait-for-turn gun around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = fire;
}

QueryPrimary(piecenum)
{
	piecenum = fire;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode body type BITMAPONLY | BITMAP1;
}


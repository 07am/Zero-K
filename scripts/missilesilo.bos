#define TA			// This is a TA script

#include "constants.h"

piece  base, body, scaffold, trolleyb, trolleyu, clampb1, clampb2, clampu1, clampu2, silo1, silo2, silo3, silo4;

static-var  padnum;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 4 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from trolleyu;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from trolleyb;
			}
			if( Func_Var_4 == 4 )
			{
				emit-sfx smoketype from scaffold;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	padnum = 1;
	start-script SmokeUnit();
	set INBUILDSTANCE to 1;
}

StartBuilding(heading, pitch)
{
	++padnum;
	if( padnum == 5 )
	{
		padnum = 1;
	}
	turn scaffold to y-axis heading speed <20>;
}

StopBuilding()
{
}

QueryNanoPiece(piecenum)
{
	piecenum = trolleyb;
}

QueryBuildInfo(piecenum)
{
	if( padnum == 1 )
	{
		piecenum = silo1;
	}
	if( padnum == 2 )
	{
		piecenum = silo2;
	}
	if( padnum == 3 )
	{
		piecenum = silo3;
	}
	if( padnum == 4 )
	{
		piecenum = silo4;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode scaffold type BITMAPONLY | BITMAP2;
		explode clampb1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode clampb2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode clampu1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode clampu2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode trolleyu type BITMAPONLY | BITMAP3;
		explode trolleyb type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode scaffold type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode clampb1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode clampb2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode clampu1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode clampu2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode trolleyu type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode trolleyb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type SHATTER | BITMAP4;
		explode scaffold type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode clampb1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode clampb2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode clampu1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode clampu2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode trolleyu type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode trolleyb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode body type SHATTER | BITMAP4;
	explode scaffold type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode clampb1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode clampb2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode clampu1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode clampu2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode trolleyu type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode trolleyb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}

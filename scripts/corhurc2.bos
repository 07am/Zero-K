//linear constant = 65536

#include "constants.h"

piece  base, body, jet, wingtipl, wingtipr;

static-var  gun_1, gun_2;

// Signal definitions
#define SIG_AIM_2			2

#define FUEL_USE_DELAY		200

/*
activatescr()
{
	if( TRUE )
	{
	}
	sleep 10;
}

deactivatescr()
{
	if( TRUE )
	{
	}
	sleep 10;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}
*/

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Lights()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		emit-sfx 1025 from wingtipl;
		emit-sfx 1026 from wingtipr;
		sleep 2000;
	}
}

Create()
{
	gun_1 = 0;
	gun_2 = 0;
	start-script SmokeUnit();
	start-script Lights();
}

Activate()
{
	//start-script RequestState(0);
}

Deactivate()
{
	//start-script RequestState(1);
}


QueryWeapon1(piecenum)
{
	piecenum = base;
}

Shot1() {
	gun_1 = !gun_1;
	sleep FUEL_USE_DELAY;
	set CURRENT_FUEL to 0;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY;
		explode jet type BITMAPONLY;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY;
		explode jet type SHATTER;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 2;
		explode body type FALL | SMOKE | FIRE;
		explode jet type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (0);
	}
	corpsetype = 2;
	explode body type FALL | SMOKE | FIRE;
	explode jet type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
}

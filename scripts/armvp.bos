#define TA			// This is a TA script

#include "constants.h"

piece  base, pad, doorl, doorr, roofl, roofr, arm1, arm2, claw1, claw2, pipesr, pipesl;

static-var  Static_Var_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2

lua_QueryNanoPiece() 
{
  return 0;
}

activatescr()
{
	if( TRUE )
	{
		turn roofl to z-axis <90> speed <60.000000>;
		turn roofr to z-axis <-90> speed <60.000000>;
		turn doorl to y-axis <90> speed <100.000000>;
		turn doorr to y-axis <-90> speed <100.000000>;
		
		turn arm1 to x-axis <20> speed <50.000000>;
		turn arm2 to x-axis <-75> speed <50.000000>;
		
		move pipesl to y-axis [8.8] speed [4.4];
		move pipesr to y-axis [8.8] speed [4.4];
		move pipesl to x-axis [7.4] speed [3.7];
		move pipesr to x-axis [-7.4] speed [3.7];
		
		sleep 1000;
	}
}

deactivatescr()
{	if( TRUE )
	{
		turn roofl to z-axis <0> speed <30.000000>;
		turn roofr to z-axis <0> speed <30.000000>;
		turn doorl to y-axis <0> speed <50.000000>;
		turn doorr to y-axis <0> speed <50.000000>;
		
		turn arm2 to z-axis <0> speed <50.000000>;
		
		move pipesl to y-axis [0] speed [4.4];
		move pipesr to y-axis [0] speed [4.4];
		move pipesl to x-axis [0] speed [3.7];
		move pipesr to x-axis [0] speed [3.7];
		
		sleep 1000;
	}
	sleep 20;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_2 = 0;
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
	turn pipesl to z-axis <-40> now;
	turn pipesr to z-axis <40> now;
}

QueryNanoPiece(piecenum)
{
	piecenum = claw1;
	call-script lua_QueryNanoPiece(piecenum);
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !Static_Var_2 )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode doorr type BITMAPONLY | BITMAP4;
		explode doorl type BITMAPONLY | BITMAP5;
		explode roofl type BITMAPONLY | BITMAP1;
		explode roofr type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP4;
		explode doorr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode doorl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode roofl type BITMAPONLY | BITMAP1;
		explode roofr type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | BITMAP4;
		explode doorr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode doorl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode roofl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode roofr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | BITMAP4;
	explode doorr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode doorl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode roofl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode roofr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
}

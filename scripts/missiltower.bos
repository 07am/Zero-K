#define TA			// This is a TA script

#include "constants.h"

piece  base, body, turret, launcher1, launcher2, firepoint1, firepoint2;

static-var  gun;

#define SIG_AIM				2

#define RESTORE_DELAY		2000

// Signal definitions

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

RestoreAfterDelay()
{
	sleep RESTORE_DELAY;
	spin turret around y-axis speed <90>;
	turn launcher1 to x-axis <-30.000000> speed <50.000000>;
	turn launcher2 to x-axis <-30.000000> speed <50.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <350.000000>;
	turn launcher1 to x-axis <0.000000> - pitch speed <350.000000>;
	turn launcher2 to x-axis <0.000000> - pitch speed <350.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn launcher1 around x-axis;
	
	start-script RestoreAfterDelay(RESTORE_DELAY);
	
	return (1);
}

Shot1()
{
	gun = !gun;
}


AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if(gun)
	{
		piecenum = firepoint1;
	}
	if(!gun)
	{
		piecenum = firepoint2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Create()
{
	turn base to x-axis <-90.000000> now;
	move base to y-axis [20] now;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode launcher1 type BITMAPONLY | BITMAP1;
		explode launcher2 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode launcher1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode launcher2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode launcher1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode launcher2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
		explode launcher1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode launcher2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}

//linear constant 65536

#include "constants.h"

piece 	base, turret, gun, wheels1, wheels2, wheels3, wheels4, flare;

static-var  Static_Var_1, wobble, restore_delay, currspeed, spinspeed, bMoving, randturn1, randturn2, randturn3, randturn4;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

WobbleUnit()
{
	while( TRUE )
	{
		if( wobble == TRUE )
		{
			move base to y-axis [2] speed [3];
		}
		if( wobble == FALSE )
		{
			move base to y-axis [-2] speed [3];
		}
		wobble = !wobble;
		sleep 750;
	}
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.000000>;
	turn base to z-axis anglez speed <50.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.021978>;
	turn base to x-axis Func_Var_1 speed <105.021978>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
}

StartMoving()
{
	bMoving = 1;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 5 from wheels1;
		emit-sfx 5 from wheels2;
		emit-sfx 5 from wheels3;
		emit-sfx 5 from wheels4;
		sleep 150;
	}
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
}
StopMoving()
{
	bMoving = 0;
}

Create()
{
	hide flare;
	restore_delay = 3000;

	randturn1 = rand( 0, 90 );
	randturn2 = rand( 90, 180 );
	randturn3 = rand( 180, 240 );
	randturn4 = rand( 240, 360 );
	
	wobble=TRUE;
	start-script WobbleUnit();
	
	hide wheels1;
	hide wheels2;
	hide wheels3;
	hide wheels4;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <10>;
	turn gun to x-axis <0.000000> speed <5>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <70>;
	turn gun to x-axis <0.000000> - pitch speed <60>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
		
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode gun type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode gun type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode turret type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 2;
		explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 2;
	explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}

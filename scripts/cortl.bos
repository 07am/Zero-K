#include "constants.h"

piece  base, arm1, arm2, turret, firepoint;

// Signal definitions
#define SIG_AIM				2

static-var gh;

Bob()
{
	while( TRUE )
		{
			turn base to x-axis Rand(<-5>, <5>) speed Rand(<1>, <2>);
			turn base to z-axis Rand(<-5>, <5>) speed Rand(<1>, <2>);
			move base to y-axis Rand([0], [0.5]) speed Rand([0.2], [0.4]);
			sleep 2000;
			turn base to x-axis Rand(<-5>, <5>) speed Rand(<1>, <2>);
			turn base to z-axis Rand(<-5>, <5>) speed Rand(<1>, <2>);
			move base to y-axis Rand([-0.5], [0]) speed Rand([0.4], [0.6]);
			sleep 1000;
		}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	gh = GET GROUND_HEIGHT(GET UNIT_XZ);
	if (gh)
	{
	turn arm1 to z-axis <70> speed <80.000000>;
	turn arm2 to z-axis <-70> speed <80.000000>;
	move base to y-axis [8] speed [10];
	}
	else
	{
	start-script Bob();
	}	
	start-script SmokeUnit();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <120.000000>;
	wait-for-turn turret around y-axis;
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	piecenum = firepoint;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode firepoint type BITMAPONLY | BITMAP2;
		explode arm1 type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode firepoint type FALL | BITMAP2;
		explode arm2 type SHATTER | BITMAP3;
		explode turret type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode firepoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode arm1 type SHATTER | BITMAP3;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode firepoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode arm2 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}

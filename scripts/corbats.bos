#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece	hull, turret1, turret2, turret3, radar,
		barrel11, barrel12, barrel13, barrel21, barrel22, barrel23, barrel31, barrel32, barrel33,
		flare11, flare12, flare13, flare21, flare22, flare23, flare31, flare32, flare33,
		wake1, wake2, ground;
		
static-var  gun_1, gun_2, gun_3, restore_delay, gun_1_yaw, gun_2_yaw, gun_3_yaw, gun_4_yaw;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_AIM_4			16
#define SIG_MOVE			32
#define SIG_AIM_5			64
#define SIG_AIM_6			128
#define SIG_AIM_7			256
#define SIG_AIM_8			512

// basic weapon behavior
#define RESTORE_DELAY			3000

#define TURRET_PITCH_SPEED_1	<30>
#define TURRET_YAW_SPEED_1		<60>
#define RECOIL_DISTANCE			[-1]
#define RECOIL_RESTORE_SPEED    [2]

#define TURRET_YAW_SPEED_2		<200>
#define TURRET_ROLL_SPEED_2		<1200>

//rockz
#define ROCK_PIECE				ground	//piece to rock
#define ROCK_Z_SPEED			3		//number of quarter-cycles per second around z-axis
#define ROCK_Z_DECAY			-1/2	//rocking around z-axis is reduced by this factor each time; should be negative to alternate rocking direction
#define ROCK_Z_MIN              <0.5>	//if around z-axis rock is not greater than this amount rocking will stop after returning to center
#define SIG_ROCK_Z				1024		//signal to prevent multiple rocking
#include "rockz.h"

#define ROCK_Z_FIRE			-16


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from hull;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	gun_1 = 0;
	gun_2 = 0;
	gun_3 = 0;
	turn turret2 to y-axis <180.000000> now;
	turn turret3 to y-axis <180.000000> now;
	spin radar around y-axis speed <100.000000>;
	restore_delay = 3000;
	start-script SmokeUnit();
	call-script RockZInit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = 6000;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret1 to y-axis <0.000000> speed <35.005495>;
	turn turret2 to y-axis <180.000000> speed <35.005495>;
	turn turret3 to y-axis <180.000000> speed <35.005495>;
}

RestoreAfterDelay2()
{
	sleep restore_delay;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 200;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <40.016484>;
	turn barrel11 to x-axis <0.000000> - pitch speed <40.005495>;
	turn barrel12 to x-axis <0.000000> - pitch speed <40.005495>;
	turn barrel13 to x-axis <0.000000> - pitch speed <40.005495>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn barrel11 around x-axis;
	start-script RestoreAfterDelay();
	gun_1_yaw = heading;
	return (1);
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <40.016484>;
	turn barrel21 to x-axis <0.000000> - pitch speed <40.005495>;
	turn barrel22 to x-axis <0.000000> - pitch speed <40.005495>;
	turn barrel23 to x-axis <0.000000> - pitch speed <40.005495>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn barrel21 around x-axis;
	start-script RestoreAfterDelay();
	gun_2_yaw = heading;
	return (1);
}

AimWeapon3(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turret3 to y-axis heading speed <40.016484>;
	turn barrel31 to x-axis <0.000000> - pitch speed <40.005495>;
	turn barrel32 to x-axis <0.000000> - pitch speed <40.005495>;
	turn barrel33 to x-axis <0.000000> - pitch speed <40.005495>;
	wait-for-turn turret3 around y-axis;
	wait-for-turn barrel31 around x-axis;
	start-script RestoreAfterDelay();
	gun_3_yaw = heading;
	return (1);
}

FireWeapon1()
{
	start-script RockZ(ROCK_Z_FIRE, gun_1_yaw);
	move barrel11 to z-axis RECOIL_DISTANCE now;
	move barrel11 to z-axis 0 speed RECOIL_RESTORE_SPEED;
	move barrel12 to z-axis RECOIL_DISTANCE now;
	move barrel12 to z-axis 0 speed RECOIL_RESTORE_SPEED;
	move barrel13 to z-axis RECOIL_DISTANCE now;
	move barrel13 to z-axis 0 speed RECOIL_RESTORE_SPEED;	
}

FireWeapon2()
{
	start-script RockZ(ROCK_Z_FIRE, gun_2_yaw);
	move barrel21 to z-axis RECOIL_DISTANCE now;
	move barrel21 to z-axis 0 speed RECOIL_RESTORE_SPEED;
	move barrel22 to z-axis RECOIL_DISTANCE now;
	move barrel22 to z-axis 0 speed RECOIL_RESTORE_SPEED;
	move barrel23 to z-axis RECOIL_DISTANCE now;
	move barrel23 to z-axis 0 speed RECOIL_RESTORE_SPEED;	
}

FireWeapon3()
{
	start-script RockZ(ROCK_Z_FIRE, gun_3_yaw);
	move barrel31 to z-axis RECOIL_DISTANCE now;
	move barrel31 to z-axis 0 speed RECOIL_RESTORE_SPEED;
	move barrel32 to z-axis RECOIL_DISTANCE now;
	move barrel32 to z-axis 0 speed RECOIL_RESTORE_SPEED;
	move barrel33 to z-axis RECOIL_DISTANCE now;
	move barrel33 to z-axis 0 speed RECOIL_RESTORE_SPEED;	
}

Shot1() {
	++gun_1;
}

Shot2() {
	++gun_2;
}

Shot3() {
	++gun_3;
}

AimFromWeapon1(piecenum)
{
	piecenum = turret1;
}

AimFromWeapon2(piecenum)
{
	piecenum = turret2;
}

AimFromWeapon3(piecenum)
{
	piecenum = turret3;
}

QueryWeapon1(piecenum)
{
	if( gun_1 == 1 ) {
		piecenum = flare11;
		show flare11;
	} else if( gun_1 == 2 ) {
		piecenum = flare12;
		show flare12;
	} else {
		piecenum = flare13;
		show flare13;
	}
}

QueryWeapon2(piecenum)
{
	if( gun_2 == 1 ) {
		piecenum = flare21;
		show flare21;
	} else if( gun_3 == 2 ) {
		piecenum = flare22;
		show flare22;
	} else {
		piecenum = flare23;
		show flare23;
	}
}

QueryWeapon3(piecenum)
{
	if( gun_3 == 1 ) {
		piecenum = flare31;
		show flare31;
	} else if( gun_3 == 2 ) {
		piecenum = flare32;
		show flare32;
	} else {
		piecenum = flare33;
		show flare33;
	}
}

SweetSpot(piecenum)
{
	piecenum = ground;
}

Killed(severity, corpsetype)
{
	if (severity <= 50)
	{
		corpsetype = 1;
		explode barrel11 type BITMAPONLY;
		explode barrel22 type BITMAPONLY;
		explode hull type BITMAPONLY;
		explode turret1 type BITMAPONLY;
		explode barrel33 type BITMAPONLY;
		explode turret3 type BITMAPONLY;
		explode turret2 type BITMAPONLY;
	}
	else
	{
		corpsetype = 2;
		explode barrel11 type FALL | SMOKE | FIRE;
		explode barrel22 type BITMAPONLY;
		explode ground type BITMAPONLY;
		explode turret1 type BITMAPONLY;
		explode barrel33 type BITMAPONLY;
		explode turret3 type BITMAPONLY;
		explode turret2 type BITMAPONLY;
	}
}
